---
AWSTemplateFormatVersion: "2010-09-09"

Description:
  Cloudformation template to deploy two lambda functions and an http gateway with 
  get and post API's that point the two lambda functions respectively

Resources:
  HTTPApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: ade-api
      ProtocolType: HTTP
      Description: This is an Http Api Gateway
  Integration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HTTPApi
      Description: Lambda Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt lambdaFunction.Arn
      IntegrationMethod: POST
      PayloadFormatVersion: '1.0'
  # Integration2:
  #   Type: AWS::ApiGatewayV2::Integration
  #   Properties:
  #     ApiId: !Ref HTTPApi
  #     Description: Lambda Integration
  #     IntegrationType: HTTP_PROXY
  #     IntegrationUri: https:// 
  #        - lambdaArn: !GetAtt lambdaFunction2.Arn
  #     IntegrationMethod: ANY
  #     PayloadFormatVersion: '1.0'
  Route:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HTTPApi
      RouteKey: '$default'
      Target: !Join
        - /
        - - integrations
          - !Ref Integration

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HTTPApi
      AutoDeploy: true
      StageName: Dev

  lambdaFunction2:
    Type: AWS::Lambda::Function
    Properties:
      Role: arn:aws:iam::835764170597:role/LambdaApiGatewayRole
      Code:
        S3Bucket: aden
        S3Key: adelogin.zip
      Description: Login Lambda function
      FunctionName: adelogin
      Handler: index.handler
      MemorySize: 128
      Runtime: python3.8
  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: arn:aws:iam::835764170597:role/LambdaApiGatewayRole
      Code:
        S3Bucket: aden
        S3Key: adesignup.zip
      Description: Sign up Lambda function
      FunctionName: adesignup
      Handler: index.handler
      Runtime: python3.8    

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      # note: if route *not* at API Gateway root, `SourceArn` would take the form of:
      #               arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HTTPApi}/${apiGatewayStageName}/${apiGatewayHTTPMethod}/PATH_PART
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HTTPApi}/${Stage}/${Route}/
#   # lambdaApiGatewayInvoke2:
#   #   Type: AWS::Lambda::Permission
#   #   Properties:
#   #     Action: lambda:InvokeFunction
#   #     FunctionName: !GetAtt lambdaFunction2.Arn
#   #     Principal: apigateway.amazonaws.com
#   #     # note: if route *not* at API Gateway root, `SourceArn` would take the form of:
#   #     #               arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${StageName}/${apiGatewayHTTPMethod}/PATH_PART
#   #     SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${StageName}/${apiGatewayHTTPMethod}/

# Outputs:
#   apiGatewayInvokeURL:
#     Value: !Sub https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${StageName}

#   lambdaArn:
#     Value: !GetAtt lambdaFunction.Arn
#     # Value: !GetAtt lambdaFunction2.Arn
